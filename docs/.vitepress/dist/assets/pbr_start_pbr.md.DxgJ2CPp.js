import{_ as a,c as t,o as e,ae as l}from"./chunks/framework.BC5PaHTK.js";const s="/doc-blog/assets/img_page07._QyiBhS6.jpg",i="/doc-blog/assets/bricks-mortar-height.0dgWuKDP.png",p="/doc-blog/assets/height_off._BOAqJgM.png",o="/doc-blog/assets/height2.DcT1PaYh.png",P=JSON.parse('{"title":"PBR 텍스처에 대해 알아보자","description":"","frontmatter":{},"headers":[],"relativePath":"pbr/start_pbr.md","filePath":"pbr/start_pbr.md","lastUpdated":1753600691000}'),b={name:"pbr/start_pbr.md"};function n(c,r,h,d,g,u){return e(),t("div",null,r[0]||(r[0]=[l('<div class="warning custom-block"><p class="custom-block-title">🔨 공사중</p><p>아직 작업이 진행중인 문서입니다.</p></div><h1 id="pbr-텍스처에-대해-알아보자" tabindex="-1">PBR 텍스처에 대해 알아보자 <a class="header-anchor" href="#pbr-텍스처에-대해-알아보자" aria-label="Permalink to &quot;PBR 텍스처에 대해 알아보자&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>이 문서는 마인크래프트 리소스팩으로 적용할 수 있는 PBR 텍스처에 대한 가이드입니다.<br> 일반적으로 3D 그래픽에서 사용되는 머터리얼 텍스처에 대한 설명과는 조금 다를 수 있습니다.</p></div><h2 id="pbr-이란" tabindex="-1">PBR 이란? <a class="header-anchor" href="#pbr-이란" aria-label="Permalink to &quot;PBR 이란?&quot;">​</a></h2><p>PBR은 물리 기반 렌더링 <strong>P</strong>hysicaly <strong>B</strong>ased <strong>R</strong>endering의 약자로<br> 아주 쉽게 말해서 현실에서 일어나는 물체 표면의 빛 반사를 모방하여 재질을 구현하는 컴퓨터 그래픽 표현 방식이다.</p><p>각 재질을 설명하는 과정에서 매우 쉽게 풀어 설명할테니 그냥 그렇구나 하고 넘어가도 된다.<br> 만약 더 자세히 알고싶으면 <a href="https://namu.wiki/w/%EB%AC%BC%EB%A6%AC%20%EA%B8%B0%EB%B0%98%20%EB%A0%8C%EB%8D%94%EB%A7%81" target="_blank" rel="noreferrer">나무위키 문서</a>를 참고하는것을 추천한다.</p><p>참고로 이곳에서 설명할 모든 재질이 PBR과 관련돼있는건 아니다.<br> 그냥 모두가 편의상 PBR 텍스처라 부르는거니 참고하길 바란다.</p><h2 id="텍스처맵이란" tabindex="-1">텍스처맵이란? <a class="header-anchor" href="#텍스처맵이란" aria-label="Permalink to &quot;텍스처맵이란?&quot;">​</a></h2><p>각 재질의 데이터가 담긴 텍스처를 보통은 &#39;맵 Map&#39; 즉, 지도라고 표현한다. 이러한 텍스처맵의 작동방식은 이름 그대로 지도를 생각하면 편한데 예를 들어 이 등고선 지도를 봐보자</p><p><img src="'+s+'" alt=""></p><p style="font-size:14px;opacity:0.8;"><a href="https://www.ngii.go.kr/child/content.do?sq=250"> 자료 출처: 국토지리정보원 어린이백과 지도백과07 </a></p><p>보다시피 평면도가 있고 평면도에 높이값에 따른 색으로 표기가 되어있다.<br> 즉, 이미지에 좌표에 따라 현실의 데이터가 저장되어있는데<br> 이걸 반대로 생각하면 편하다.<br> 위쪽처럼 &#39;등고선 맵&#39;을 만들어서 아래처럼 적용하는것이다.</p><p>이 등고선과 동일한 역할을 하는게 &#39;Height Map&#39; 높이맵이다.</p><img src="'+i+'" width="300"><p>이 흑백의 텍스처맵에는 밝기 값을 통해 높이가 저장되어있다.<br> 따라서 이렇게 되어있는 재질에 이 Height 맵을 추가하면<br><img src="'+p+'" alt=""></p><p>이런식의 표현이 가능해지게 되는것이다. <img src="'+o+'" alt=""></p><p>이런식으로 텍스처에 재질값을 원하는 위치의 저장하는것이<br> 텍스처맵의 역할이다.</p><h2 id="마인크래프트에-pbr-텍스처를-적용해보자" tabindex="-1">마인크래프트에 PBR 텍스처를 적용해보자 <a class="header-anchor" href="#마인크래프트에-pbr-텍스처를-적용해보자" aria-label="Permalink to &quot;마인크래프트에 PBR 텍스처를 적용해보자&quot;">​</a></h2><p>마인크래프트에서 PBR텍스처를 적용하기 위해선 그냥 텍스처의 이름만 맞춰 넣으면 되는것이 아닌<br> 각 포맷에 맞춰 넣어주어야 한다.</p><hr><h3 id="pbr-텍스처-포맷" tabindex="-1">PBR 텍스처 포맷 <a class="header-anchor" href="#pbr-텍스처-포맷" aria-label="Permalink to &quot;PBR 텍스처 포맷&quot;">​</a></h3><ul><li><a href="https://learn.microsoft.com/en-us/minecraft/creator/documents/vibrantvisuals/pbroverview?view=minecraft-bedrock-stable" target="_blank" rel="noreferrer">베드락 포맷(원문)</a><ul><li>베드락 PBR 리소스팩에 대해 알아보자 <code>(문서 작성 예정)</code></li></ul></li></ul><ul><li>자바 포맷 <ul><li><a href="https://shaderlabs.org/wiki/LabPBR_Material_Standard" target="_blank" rel="noreferrer">LabPBR 1.3(원문)</a></li><li>OldPBR (SEUSpbr)</li></ul></li></ul><hr><p>각 포맷에 대해 좀더 자세히 설명하자면</p><p>베드락 포맷은 MERS PBR이라고도 불리며 광선추적(RTX)및 선명한 비주얼에서 사용된다.<br> 자세한 내용은 베드락 포맷 설명문에도 적어놨으니 해당 글을 참고하면 된다.</p><p>자바에서 PBR 텍스처는 공식이 아닌 무조건 셰이더 모드에서만 사용된다.<br> 따라서 PBR 재질 표현력이 좋은 셰이더를 사용하는게 좋고(Kappa, Bliss등)<br> ApolloRT와 같이 빛에 경로추적 기술을 사용하는 셰이더를 사용하는것이 도움된다.</p><details class="details custom-block"><summary>개발시 추천하는 셰이더 목록</summary><p>무조건 경로추적을 사용하는것만 모아둔것은 아니고<br> 개발할때 추천하는 목록이다.<br> 당연히 사양을 많이 타니 고려해서 구매하는것을 추천한다.<br> 강조된것은 실제로 개발에 많이 씌이는 셰이더다.</p><ul><li>유로 <ul><li><strong>KappaPT</strong>*</li><li>NostalgiaVX</li><li><strong>Sundial</strong>*</li><li>ApolloRT</li><li>ContinuumRT</li></ul></li></ul><ul><li>무료 <ul><li><strong>Kappa</strong>*</li><li><strong>Bliss</strong>*</li><li><strong>BSL</strong>*</li></ul></li></ul></details><p>OldPBR과 LabPBR이 있는데 쉽게 말해 전세대 신세대 포맷이다.<br> 현제는 업데이트가 끊기지 않는이상 모든 셰이더와 리소스팩이 LabPBR포맷을 지원하기 때문에<br> 해당 포맷을 사용하는것이 좋다.</p><p>OldPBR은 이전에 SEUS 셰이더에서 사용하다 퍼진 포맷으로<br> 몇년전에 업데이트가 끊긴 셰이더및 리소스팩은 모두 이 포맷으로 되어있다.</p><p>때문에 업데이트가 몇년간 끊긴 SEUS PTGI는 여전히 OldPBR 포맷을 사용중이니<br> PBR 리소스팩을 개발할땐 셰이더의 퀄리티가 좋아도 SEUS PTGI는 쓰지 않는것이 좋다.<br> ( 만약 정말로 사용하고싶다면 <a href="https://github.com/GeForceLegend/SEUS_PTGI_GFME" target="_blank" rel="noreferrer">SEUS PTGI GFME</a>를 사용할 수 있다.<br> 참고로 이걸 쓴다고 해도 여전히 OldPBR에서 지원하던 재질만 지원하니 참고하자 )</p><h2 id="포맷에-맞춰-적용하는-법" tabindex="-1">포맷에 맞춰 적용하는 법 <a class="header-anchor" href="#포맷에-맞춰-적용하는-법" aria-label="Permalink to &quot;포맷에 맞춰 적용하는 법&quot;">​</a></h2><p>베드락의 경우 이 역시 베드락 포맷 설명문에 적어놨다.</p><p>Pixelgraph라는 PBR 리소스팩 제작 도구가 있는데 ( PBR 텍스처 제작 X )<br> 베드락의 경우 직접 편집하거나 Pixelgraph를 통해 관리하는게 좋고<br> 자바는 그냥 Pixelgraph를 쓰는걸 추천한다.</p><ul><li>Pixelgraph 사용법 <code>(문서 작성 예정)</code></li></ul><p>직접 편집하는 경우 OldPBR과 베드락 둘 다 RGB 채널을 직접 편집해야 할텐데<br> 먼저 RGB 채널에 저장한다는 개념을 먼저 설명하자면</p><p>디지털이 Red Green Blue 삼원색을 통해 색상을 표시한다는 말은 한번쯤 들어봤을것이다.<br> 따라서 png이미지 파일에도 RGB값 그리고 투명도를 표현하는 Alpha값을 저장하는데<br> 이걸 그냥 흑백 이미지 4개로 치는거다<br> 그러니까 Red값 255, Blue값 255, Green값 255, Alpha값 255 이거를<br> 밝기값 255 4개처럼 사용하는거다.<br> 이렇게 하면 이미지 파일 하나당 최대 4개의 흑백 텍스처를 저장할 수 있는거다.<br> (물론 이것도 파고들면 기술상으로 손상이 어쩌고가 있긴한데 자세히 알 필요는 없다.)</p><p>만약 포토샵을 다룰줄 알거나<br> RGB채널의 개념이 이미 뭔줄 알고있고 다룰 줄도 안다면 상관이 없지만<br> 만약 포토샵도 없고 지식도 없다면 아래 글을 참고하자</p><ul><li>RGB채널 편집하는법 <code>(문서 작성 예정)</code></li></ul><br><p>LabPBR의 경우 RGB 채널의 분리뿐 아니라 추가적인 작업이 필요한데<br> 보통은 매크로나 미리 만들어놓은 프로그램등을 사용한다.</p><p><strong>만약 Substance Desinger을 통해 텍스처를 제작한다면</strong><br> 이 커스텀 노드를 사용하는것을 추천한다.<br><a href="https://github.com/frugbug/labpbr-substance-tools" target="_blank" rel="noreferrer">https://github.com/frugbug/labpbr-substance-tools</a><br> 업데이트가 끊겨서 최신버전에서 불러오면 뭐가 좀 많이 뜰텐데<br> labpbr publish노드는 아직 잘 작동하니 문제 없다.</p>',42)]))}const R=a(b,[["render",n]]);export{P as __pageData,R as default};
